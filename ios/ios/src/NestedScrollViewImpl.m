//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSNestedScrollViewPlugin\src\main\java\com\ashera\nestedscrollview\NestedScrollViewImpl.java
//

#include "BaseHasWidgets.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FrameLayout.h"
#include "Handler.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "NestedScrollView.h"
#include "NestedScrollViewImpl.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "ViewTreeObserver.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIScrollView.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASNestedScrollViewImpl () {
 @public
  id uiView_;
  ADXNestedScrollView *nestedScrollView_;
  jint oldScrollY_;
  jint nestedScrollStopDelay_;
  jlong lastScrollEvent_;
  ADHandler *nestedScrollHandler_;
  IOSIntArray *mScrollOffset_;
  IOSIntArray *mScrollConsumed_;
  jint thumbWidth_;
  ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *builder_;
  ASNestedScrollViewImpl_NestedScrollViewBean *bean_;
  ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *paramsBuilder_;
  ASNestedScrollViewImpl_NestedScrollViewParamsBean *paramsBean_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setOnScrollChangeListenerWithId:(id)objValue;

- (void)handleScrollWithInt:(jint)selection
                    withInt:(jint)eventDetail;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)postOnMeasureWithInt:(jint)widthMeasureSpec
                     withInt:(jint)heightMeasureSpec;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setEnabledWithBoolean:(jboolean)objValue;

- (void)setScrollEnabledWithId:(id)nativeWidget
                        withId:(id)value;

- (jboolean)hasReachedEndWithInt:(jint)selection;

@end

J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl, nestedScrollView_, ADXNestedScrollView *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl, nestedScrollHandler_, ADHandler *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl, mScrollOffset_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl, mScrollConsumed_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl, builder_, ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl, bean_, ASNestedScrollViewImpl_NestedScrollViewBean *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl, paramsBuilder_, ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl, paramsBean_, ASNestedScrollViewImpl_NestedScrollViewParamsBean *)

__attribute__((unused)) static void ASNestedScrollViewImpl_setWidgetOnNativeClass(ASNestedScrollViewImpl *self);

__attribute__((unused)) static void ASNestedScrollViewImpl_nativeRemoveViewWithASIWidget_(ASNestedScrollViewImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASNestedScrollViewImpl_createLayoutParamsWithADView_(ASNestedScrollViewImpl *self, ADView *view);

__attribute__((unused)) static ADFrameLayout_LayoutParams *ASNestedScrollViewImpl_getLayoutParamsWithADView_(ASNestedScrollViewImpl *self, ADView *view);

__attribute__((unused)) static void ASNestedScrollViewImpl_setOnScrollChangeListenerWithId_(ASNestedScrollViewImpl *self, id objValue);

__attribute__((unused)) static void ASNestedScrollViewImpl_handleScrollWithInt_withInt_(ASNestedScrollViewImpl *self, jint selection, jint eventDetail);

__attribute__((unused)) static void ASNestedScrollViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASNestedScrollViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASNestedScrollViewImpl_postOnMeasureWithInt_withInt_(ASNestedScrollViewImpl *self, jint widthMeasureSpec, jint heightMeasureSpec);

__attribute__((unused)) static void ASNestedScrollViewImpl_nativeCreateWithJavaUtilMap_(ASNestedScrollViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASNestedScrollViewImpl_setEnabledWithBoolean_(ASNestedScrollViewImpl *self, jboolean objValue);

__attribute__((unused)) static void ASNestedScrollViewImpl_setScrollEnabledWithId_withId_(ASNestedScrollViewImpl *self, id nativeWidget, id value);

__attribute__((unused)) static jboolean ASNestedScrollViewImpl_hasReachedEndWithInt_(ASNestedScrollViewImpl *self, jint selection);

@interface ASNestedScrollViewImpl_NestedScrollViewExt () {
 @public
  __unsafe_unretained ASNestedScrollViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl_NestedScrollViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl_NestedScrollViewExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl_NestedScrollViewExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl_NestedScrollViewExt, templates_, id<JavaUtilMap>)

@interface ASNestedScrollViewImpl_OnScrollChangeListener : NSObject < ADXNestedScrollView_OnScrollChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onScrollChangeWithADXNestedScrollView:(ADXNestedScrollView *)v
                                      withInt:(jint)scrollX
                                      withInt:(jint)scrollY
                                      withInt:(jint)oldScrollX
                                      withInt:(jint)oldScrollY;

- (id<JavaUtilMap>)getOnScrollChangeEventObjWithADXNestedScrollView:(ADXNestedScrollView *)v
                                                            withInt:(jint)scrollX
                                                            withInt:(jint)scrollY
                                                            withInt:(jint)oldScrollX
                                                            withInt:(jint)oldScrollY;

@end

J2OBJC_EMPTY_STATIC_INIT(ASNestedScrollViewImpl_OnScrollChangeListener)

J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl_OnScrollChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl_OnScrollChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl_OnScrollChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl_OnScrollChangeListener, action_, NSString *)

__attribute__((unused)) static void ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(ASNestedScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASNestedScrollViewImpl_OnScrollChangeListener *new_ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASNestedScrollViewImpl_OnScrollChangeListener *create_ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(ASNestedScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASNestedScrollViewImpl_OnScrollChangeListener *new_ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASNestedScrollViewImpl_OnScrollChangeListener *create_ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASNestedScrollViewImpl_OnScrollChangeListener)

@interface ASNestedScrollViewImpl_NestedScrollViewCommandBuilder () {
 @public
  ASNestedScrollViewImpl *this$0_;
}

@end

@interface ASNestedScrollViewImpl_NestedScrollViewBean () {
 @public
  ASNestedScrollViewImpl *this$0_;
}

@end

@interface ASNestedScrollViewImpl_NestedScrollViewParamsBean () {
 @public
  ASNestedScrollViewImpl *this$0_;
}

@end

@interface ASNestedScrollViewImpl_MyUIScrollViewDelegate () {
 @public
  __unsafe_unretained ASNestedScrollViewImpl *this$0_;
  id<ADView_OnScrollChangeListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASNestedScrollViewImpl_MyUIScrollViewDelegate, listener_, id<ADView_OnScrollChangeListener>)

@interface ASNestedScrollViewImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASNestedScrollViewImpl_$Lambda$1)

__attribute__((unused)) static void ASNestedScrollViewImpl_$Lambda$1_initWithASIWidget_(ASNestedScrollViewImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASNestedScrollViewImpl_$Lambda$1 *new_ASNestedScrollViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASNestedScrollViewImpl_$Lambda$1 *create_ASNestedScrollViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);

@interface ASNestedScrollViewImpl_$Lambda$2 : NSObject < JavaLangRunnable > {
 @public
  ASNestedScrollViewImpl *this$0_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASNestedScrollViewImpl_$Lambda$2)

__attribute__((unused)) static void ASNestedScrollViewImpl_$Lambda$2_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_$Lambda$2 *self, ASNestedScrollViewImpl *outer$);

__attribute__((unused)) static ASNestedScrollViewImpl_$Lambda$2 *new_ASNestedScrollViewImpl_$Lambda$2_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASNestedScrollViewImpl_$Lambda$2 *create_ASNestedScrollViewImpl_$Lambda$2_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$);

@interface ASNestedScrollViewImpl_$Lambda$3 : NSObject < JavaLangRunnable > {
 @public
  ASNestedScrollViewImpl *this$0_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASNestedScrollViewImpl_$Lambda$3)

__attribute__((unused)) static void ASNestedScrollViewImpl_$Lambda$3_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_$Lambda$3 *self, ASNestedScrollViewImpl *outer$);

__attribute__((unused)) static ASNestedScrollViewImpl_$Lambda$3 *new_ASNestedScrollViewImpl_$Lambda$3_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASNestedScrollViewImpl_$Lambda$3 *create_ASNestedScrollViewImpl_$Lambda$3_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$);

NSString *ASNestedScrollViewImpl_LOCAL_NAME = @"androidx.core.widget.NestedScrollView";
NSString *ASNestedScrollViewImpl_GROUP_NAME = @"androidx.core.widget.NestedScrollView";

@implementation ASNestedScrollViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundGravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"measureAllChildren"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"nestedScrollingEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onScrollChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fillViewport"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"smoothScrollingEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASNestedScrollViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASNestedScrollViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASNestedScrollViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASNestedScrollViewImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  nestedScrollView_ = new_ASNestedScrollViewImpl_NestedScrollViewExt_initWithASNestedScrollViewImpl_(self);
  ASNestedScrollViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASNestedScrollViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASNestedScrollViewImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return nestedScrollView_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASNestedScrollViewImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) getChildCount]) {
    [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) removeViewAtWithInt:index];
    ASNestedScrollViewImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASNestedScrollViewImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASNestedScrollViewImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) addViewWithADView:view];
    }
    else {
      [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASNestedScrollViewImpl_createLayoutParamsWithADView_(self, view);
}

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASNestedScrollViewImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASNestedScrollViewImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity" }, 3)) {
    case 0:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASNestedScrollViewImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity" }, 3)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->gravity_);
    }
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASNestedScrollViewImpl_NestedScrollViewExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"foregroundGravity", @"measureAllChildren", @"nestedScrollingEnabled", @"onScrollChange", @"fillViewport", @"smoothScrollingEnabled" }, 6)) {
    case 0:
    {
      [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) setForegroundGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) setMeasureAllChildrenWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 2:
    {
      [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) setNestedScrollingEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 3:
    {
      ASNestedScrollViewImpl_setOnScrollChangeListenerWithId_(self, objValue);
    }
    break;
    case 4:
    {
      [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) setFillViewportWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 5:
    {
      [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) setSmoothScrollingEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    default:
    break;
  }
  ASNestedScrollViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"measureAllChildren" }, 1)) {
    case 0:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADXNestedScrollView *) nil_chk(nestedScrollView_)) getMeasureAllChildren]);
      }
    }
  }
  return nil;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setOnScrollChangeListenerWithId:(id)objValue {
  ASNestedScrollViewImpl_setOnScrollChangeListenerWithId_(self, objValue);
}

- (void)handleScrollWithInt:(jint)selection
                    withInt:(jint)eventDetail {
  ASNestedScrollViewImpl_handleScrollWithInt_withInt_(self, selection, eventDetail);
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASNestedScrollViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)postOnMeasureWithInt:(jint)widthMeasureSpec
                     withInt:(jint)heightMeasureSpec {
  ASNestedScrollViewImpl_postOnMeasureWithInt_withInt_(self, widthMeasureSpec, heightMeasureSpec);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXNestedScrollView *) nil_chk(nestedScrollView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASNestedScrollViewImpl_NestedScrollViewBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASNestedScrollViewImpl_NestedScrollViewBean_initWithASNestedScrollViewImpl_(self);
  }
  return bean_;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASNestedScrollViewImpl_NestedScrollViewCommandBuilder_initWithASNestedScrollViewImpl_(self);
  }
  return builder_;
}

- (ASNestedScrollViewImpl_NestedScrollViewParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASNestedScrollViewImpl_NestedScrollViewParamsBean_initWithASNestedScrollViewImpl_(self);
  }
  return paramsBean_;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder_initWithASNestedScrollViewImpl_(self);
  }
  return paramsBuilder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASNestedScrollViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)nativescrollViewCreate {
  ASUIScrollView* uiView = [ASUIScrollView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView.showsVerticalScrollIndicator=YES;
  uiView.scrollEnabled=YES;
  uiView.bounces=NO;
  uiView.delaysContentTouches=YES;
  uiView.userInteractionEnabled=YES;
  return uiView;
}

- (void)setEnabledWithBoolean:(jboolean)objValue {
  ASNestedScrollViewImpl_setEnabledWithBoolean_(self, objValue);
}

- (void)setScrollEnabledWithId:(id)nativeWidget
                        withId:(id)value {
  ASNestedScrollViewImpl_setScrollEnabledWithId_withId_(self, nativeWidget, value);
}

- (jboolean)hasReachedEndWithInt:(jint)selection {
  return ASNestedScrollViewImpl_hasReachedEndWithInt_(self, selection);
}

- (id)asNativeWidget {
  return uiView_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 1, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, 36, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 38, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 40, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(checkIosVersionWithNSString:);
  methods[20].selector = @selector(requestLayout);
  methods[21].selector = @selector(invalidate);
  methods[22].selector = @selector(setOnScrollChangeListenerWithId:);
  methods[23].selector = @selector(handleScrollWithInt:withInt:);
  methods[24].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[25].selector = @selector(postOnMeasureWithInt:withInt:);
  methods[26].selector = @selector(setIdWithNSString:);
  methods[27].selector = @selector(setVisibleWithBoolean:);
  methods[28].selector = @selector(getPluginWithNSString:);
  methods[29].selector = @selector(getBean);
  methods[30].selector = @selector(getBuilder);
  methods[31].selector = @selector(getParamsBean);
  methods[32].selector = @selector(getParamsBuilder);
  methods[33].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[34].selector = @selector(nativescrollViewCreate);
  methods[35].selector = @selector(setEnabledWithBoolean:);
  methods[36].selector = @selector(setScrollEnabledWithId:withId:);
  methods[37].selector = @selector(hasReachedEndWithInt:);
  methods[38].selector = @selector(asNativeWidget);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "nestedScrollView_", "LADXNestedScrollView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oldScrollY_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nestedScrollStopDelay_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastScrollEvent_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nestedScrollHandler_", "LADHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScrollOffset_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mScrollConsumed_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "thumbWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASNestedScrollViewImpl_NestedScrollViewBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASNestedScrollViewImpl_NestedScrollViewParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "setOnScrollChangeListener", "LNSObject;", "handleScroll", "II", "postSetAttribute", "postOnMeasure", "setId", "setVisible", "Z", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setEnabled", "setScrollEnabled", "LNSObject;LNSObject;", "hasReachedEnd", &ASNestedScrollViewImpl_LOCAL_NAME, &ASNestedScrollViewImpl_GROUP_NAME, "LASNestedScrollViewImpl_NestedScrollViewExt;LASNestedScrollViewImpl_OnScrollChangeListener;LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;LASNestedScrollViewImpl_NestedScrollViewBean;LASNestedScrollViewImpl_NestedScrollViewParamsBean;LASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder;LASNestedScrollViewImpl_MyUIScrollViewDelegate;" };
  static const J2ObjcClassInfo _ASNestedScrollViewImpl = { "NestedScrollViewImpl", "com.ashera.nestedscrollview", ptrTable, methods, fields, 7, 0x1, 39, 15, -1, 43, -1, -1, -1 };
  return &_ASNestedScrollViewImpl;
}

@end

void ASNestedScrollViewImpl_init(ASNestedScrollViewImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASNestedScrollViewImpl_GROUP_NAME, ASNestedScrollViewImpl_LOCAL_NAME);
  self->oldScrollY_ = 0;
  self->nestedScrollStopDelay_ = 700;
  self->nestedScrollHandler_ = new_ADHandler_init();
  self->mScrollOffset_ = [IOSIntArray newArrayWithLength:2];
  self->mScrollConsumed_ = [IOSIntArray newArrayWithLength:2];
  self->thumbWidth_ = 0;
}

ASNestedScrollViewImpl *new_ASNestedScrollViewImpl_init() {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl, init)
}

ASNestedScrollViewImpl *create_ASNestedScrollViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl, init)
}

void ASNestedScrollViewImpl_initWithNSString_(ASNestedScrollViewImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASNestedScrollViewImpl_GROUP_NAME, localname);
  self->oldScrollY_ = 0;
  self->nestedScrollStopDelay_ = 700;
  self->nestedScrollHandler_ = new_ADHandler_init();
  self->mScrollOffset_ = [IOSIntArray newArrayWithLength:2];
  self->mScrollConsumed_ = [IOSIntArray newArrayWithLength:2];
  self->thumbWidth_ = 0;
}

ASNestedScrollViewImpl *new_ASNestedScrollViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl, initWithNSString_, localname)
}

ASNestedScrollViewImpl *create_ASNestedScrollViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl, initWithNSString_, localname)
}

void ASNestedScrollViewImpl_initWithNSString_withNSString_(ASNestedScrollViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->oldScrollY_ = 0;
  self->nestedScrollStopDelay_ = 700;
  self->nestedScrollHandler_ = new_ADHandler_init();
  self->mScrollOffset_ = [IOSIntArray newArrayWithLength:2];
  self->mScrollConsumed_ = [IOSIntArray newArrayWithLength:2];
  self->thumbWidth_ = 0;
}

ASNestedScrollViewImpl *new_ASNestedScrollViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASNestedScrollViewImpl *create_ASNestedScrollViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASNestedScrollViewImpl_setWidgetOnNativeClass(ASNestedScrollViewImpl *self) {
  ((ASUIScrollView*) [self asNativeWidget]).widget = self;
}

void ASNestedScrollViewImpl_nativeRemoveViewWithASIWidget_(ASNestedScrollViewImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADXNestedScrollView *) nil_chk(self->nestedScrollView_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASNestedScrollViewImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASNestedScrollViewImpl_createLayoutParamsWithADView_(ASNestedScrollViewImpl *self, ADView *view) {
  ADFrameLayout_LayoutParams *layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADFrameLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADFrameLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADFrameLayout_LayoutParams *ASNestedScrollViewImpl_getLayoutParamsWithADView_(ASNestedScrollViewImpl *self, ADView *view) {
  return (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
}

void ASNestedScrollViewImpl_setOnScrollChangeListenerWithId_(ASNestedScrollViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    [((ADXNestedScrollView *) nil_chk(self->nestedScrollView_)) setOnScrollChangeListenerWithADXNestedScrollView_OnScrollChangeListener:new_ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(self, (NSString *) objValue, @"onScrollChange")];
  }
  else {
    [((ADXNestedScrollView *) nil_chk(self->nestedScrollView_)) setOnScrollChangeListenerWithADXNestedScrollView_OnScrollChangeListener:(id<ADXNestedScrollView_OnScrollChangeListener>) cast_check(objValue, ADXNestedScrollView_OnScrollChangeListener_class_())];
  }
}

void ASNestedScrollViewImpl_handleScrollWithInt_withInt_(ASNestedScrollViewImpl *self, jint selection, jint eventDetail) {
  [((ADHandler *) nil_chk(self->nestedScrollHandler_)) removeCallbacksAndMessagesWithId:nil];
  jlong currentTime = JavaLangSystem_currentTimeMillis();
  if (currentTime - self->lastScrollEvent_ >= self->nestedScrollStopDelay_) {
    [((ADXNestedScrollView *) nil_chk(self->nestedScrollView_)) startNestedScrollWithInt:ADXViewCompat_SCROLL_AXIS_VERTICAL withInt:ADXViewCompat_TYPE_TOUCH];
  }
  [((ADHandler *) nil_chk(self->nestedScrollHandler_)) postDelayedWithJavaLangRunnable:new_ASNestedScrollViewImpl_$Lambda$2_initWithASNestedScrollViewImpl_(self) withLong:self->nestedScrollStopDelay_];
  self->lastScrollEvent_ = JavaLangSystem_currentTimeMillis();
  jint scrolledDeltaY = selection - self->oldScrollY_;
  jint unconsumedY = 0;
  if ([((ADXNestedScrollView *) nil_chk(self->nestedScrollView_)) dispatchNestedPreScrollWithInt:0 withInt:scrolledDeltaY withIntArray:self->mScrollConsumed_ withIntArray:self->mScrollOffset_ withInt:ADXViewCompat_TYPE_TOUCH]) {
  }
  *IOSIntArray_GetRef(nil_chk(self->mScrollConsumed_), 1) = 0;
  [((ADXNestedScrollView *) nil_chk(self->nestedScrollView_)) dispatchNestedScrollWithInt:0 withInt:scrolledDeltaY withInt:0 withInt:unconsumedY withIntArray:self->mScrollOffset_ withInt:ADXViewCompat_TYPE_TOUCH withIntArray:self->mScrollConsumed_];
  if (eventDetail == 0 && (selection == 0 || ASNestedScrollViewImpl_hasReachedEndWithInt_(self, selection))) {
    ASNestedScrollViewImpl_setEnabledWithBoolean_(self, false);
    [new_ADHandler_init() postDelayedWithJavaLangRunnable:new_ASNestedScrollViewImpl_$Lambda$3_initWithASNestedScrollViewImpl_(self) withLong:100];
  }
  id<ADXNestedScrollView_OnScrollChangeListener> onScrollChangeListener = [((ADXNestedScrollView *) nil_chk(self->nestedScrollView_)) getOnScrollChangeListener];
  if (onScrollChangeListener != nil) {
    [onScrollChangeListener onScrollChangeWithADXNestedScrollView:self->nestedScrollView_ withInt:0 withInt:selection withInt:0 withInt:self->oldScrollY_];
  }
  [((ADViewTreeObserver *) nil_chk([((ADXNestedScrollView *) nil_chk(self->nestedScrollView_)) getViewTreeObserver])) dispatchOnScrollChanged];
  self->oldScrollY_ = selection;
}

void ASNestedScrollViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASNestedScrollViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"nestedScrollingEnabled" }, 1)) {
    case 0:
    ASNestedScrollViewImpl_setEnabledWithBoolean_(self, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
    break;
    default:
    break;
  }
}

void ASNestedScrollViewImpl_postOnMeasureWithInt_withInt_(ASNestedScrollViewImpl *self, jint widthMeasureSpec, jint heightMeasureSpec) {
  [((ADXNestedScrollView *) nil_chk(self->nestedScrollView_)) adjustPaddingIfScrollBarPresentWithInt:widthMeasureSpec withInt:heightMeasureSpec withInt:self->thumbWidth_];
}

void ASNestedScrollViewImpl_nativeCreateWithJavaUtilMap_(ASNestedScrollViewImpl *self, id<JavaUtilMap> params) {
  self->uiView_ = [self nativescrollViewCreate];
  ASNestedScrollViewImpl_MyUIScrollViewDelegate *myUIScrollViewDelegate = new_ASNestedScrollViewImpl_MyUIScrollViewDelegate_initWithASNestedScrollViewImpl_(self);
  [myUIScrollViewDelegate nativeScrollChangeListenerWithId:[self asNativeWidget]];
}

void ASNestedScrollViewImpl_setEnabledWithBoolean_(ASNestedScrollViewImpl *self, jboolean objValue) {
  ASNestedScrollViewImpl_setScrollEnabledWithId_withId_(self, self->uiView_, JavaLangBoolean_valueOfWithBoolean_(objValue));
}

void ASNestedScrollViewImpl_setScrollEnabledWithId_withId_(ASNestedScrollViewImpl *self, id nativeWidget, id value) {
  ((UIScrollView*) nativeWidget).scrollEnabled = [(JavaLangBoolean*) value booleanValue];
}

jboolean ASNestedScrollViewImpl_hasReachedEndWithInt_(ASNestedScrollViewImpl *self, jint selection) {
  UIScrollView* scrollview = ((UIScrollView*)self->uiView_);
  return selection >= (scrollview.contentSize.height - scrollview.frame.size.height);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNestedScrollViewImpl)

@implementation ASNestedScrollViewImpl_NestedScrollViewExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASNestedScrollViewImpl:(ASNestedScrollViewImpl *)outer$ {
  ASNestedScrollViewImpl_NestedScrollViewExt_initWithASNestedScrollViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
  ASNestedScrollViewImpl_postOnMeasureWithInt_withInt_(this$0_, widthMeasureSpec, heightMeasureSpec);
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b, (jint) ([self computeVerticalScrollRange]));
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASNestedScrollViewImpl_NestedScrollViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASNestedScrollViewImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASNestedScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASNestedScrollViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASNestedScrollViewImpl_NestedScrollViewExt = { "NestedScrollViewExt", "com.ashera.nestedscrollview", ptrTable, methods, fields, 7, 0x1, 38, 7, 3, -1, -1, -1, -1 };
  return &_ASNestedScrollViewImpl_NestedScrollViewExt;
}

@end

void ASNestedScrollViewImpl_NestedScrollViewExt_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_NestedScrollViewExt *self, ASNestedScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  ADXNestedScrollView_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASNestedScrollViewImpl_NestedScrollViewExt *new_ASNestedScrollViewImpl_NestedScrollViewExt_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_NestedScrollViewExt, initWithASNestedScrollViewImpl_, outer$)
}

ASNestedScrollViewImpl_NestedScrollViewExt *create_ASNestedScrollViewImpl_NestedScrollViewExt_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_NestedScrollViewExt, initWithASNestedScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNestedScrollViewImpl_NestedScrollViewExt)

@implementation ASNestedScrollViewImpl_OnScrollChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onScrollChangeWithADXNestedScrollView:(ADXNestedScrollView *)v
                                      withInt:(jint)scrollX
                                      withInt:(jint)scrollY
                                      withInt:(jint)oldScrollX
                                      withInt:(jint)oldScrollY {
  if (action_ == nil || [action_ isEqual:@"onScrollChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onScrollChange"];
    id<JavaUtilMap> obj = [self getOnScrollChangeEventObjWithADXNestedScrollView:v withInt:scrollX withInt:scrollY withInt:oldScrollX withInt:oldScrollY];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, JavaLangInteger_valueOfWithInt_(scrollX), JavaLangInteger_valueOfWithInt_(scrollY), JavaLangInteger_valueOfWithInt_(oldScrollX), JavaLangInteger_valueOfWithInt_(oldScrollY) } count:5 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnScrollChangeEventObjWithADXNestedScrollView:(ADXNestedScrollView *)v
                                                            withInt:(jint)scrollX
                                                            withInt:(jint)scrollY
                                                            withInt:(jint)oldScrollX
                                                            withInt:(jint)oldScrollY {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"scrollchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"scrollX", JavaLangInteger_valueOfWithInt_(scrollX));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"scrollY", JavaLangInteger_valueOfWithInt_(scrollY));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"oldScrollX", JavaLangInteger_valueOfWithInt_(oldScrollX));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"oldScrollY", JavaLangInteger_valueOfWithInt_(oldScrollY));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onScrollChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onScrollChangeWithADXNestedScrollView:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(getOnScrollChangeEventObjWithADXNestedScrollView:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onScrollChange", "LADXNestedScrollView;IIII", "getOnScrollChangeEventObj", "(Landroidx/core/widget/NestedScrollView;IIII)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASNestedScrollViewImpl;" };
  static const J2ObjcClassInfo _ASNestedScrollViewImpl_OnScrollChangeListener = { "OnScrollChangeListener", "com.ashera.nestedscrollview", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASNestedScrollViewImpl_OnScrollChangeListener;
}

@end

void ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(ASNestedScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASNestedScrollViewImpl_OnScrollChangeListener *new_ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASNestedScrollViewImpl_OnScrollChangeListener *create_ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(ASNestedScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASNestedScrollViewImpl_OnScrollChangeListener *new_ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASNestedScrollViewImpl_OnScrollChangeListener *create_ASNestedScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNestedScrollViewImpl_OnScrollChangeListener)

@implementation ASNestedScrollViewImpl_NestedScrollViewCommandBuilder

- (instancetype)initWithASNestedScrollViewImpl:(ASNestedScrollViewImpl *)outer$ {
  ASNestedScrollViewImpl_NestedScrollViewCommandBuilder_initWithASNestedScrollViewImpl_(self, outer$);
  return self;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)setForegroundGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundGravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)tryGetMeasureAllChildren {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureAllChildren"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isMeasureAllChildren {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureAllChildren"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)setMeasureAllChildrenWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureAllChildren"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)setNestedScrollingEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"nestedScrollingEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)setOnScrollChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onScrollChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)setFillViewportWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"fillViewport"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *)setSmoothScrollingEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"smoothScrollingEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandBuilder;", 0x1, 9, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASNestedScrollViewImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setForegroundGravityWithNSString:);
  methods[3].selector = @selector(tryGetMeasureAllChildren);
  methods[4].selector = @selector(isMeasureAllChildren);
  methods[5].selector = @selector(setMeasureAllChildrenWithBoolean:);
  methods[6].selector = @selector(setNestedScrollingEnabledWithBoolean:);
  methods[7].selector = @selector(setOnScrollChangeWithNSString:);
  methods[8].selector = @selector(setFillViewportWithBoolean:);
  methods[9].selector = @selector(setSmoothScrollingEnabledWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASNestedScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASNestedScrollViewImpl;", "execute", "Z", "setForegroundGravity", "LNSString;", "setMeasureAllChildren", "setNestedScrollingEnabled", "setOnScrollChange", "setFillViewport", "setSmoothScrollingEnabled", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/nestedscrollview/NestedScrollViewImpl$NestedScrollViewCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASNestedScrollViewImpl_NestedScrollViewCommandBuilder = { "NestedScrollViewCommandBuilder", "com.ashera.nestedscrollview", ptrTable, methods, fields, 7, 0x1, 10, 1, 0, -1, -1, 10, -1 };
  return &_ASNestedScrollViewImpl_NestedScrollViewCommandBuilder;
}

@end

void ASNestedScrollViewImpl_NestedScrollViewCommandBuilder_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *self, ASNestedScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *new_ASNestedScrollViewImpl_NestedScrollViewCommandBuilder_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_NestedScrollViewCommandBuilder, initWithASNestedScrollViewImpl_, outer$)
}

ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *create_ASNestedScrollViewImpl_NestedScrollViewCommandBuilder_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_NestedScrollViewCommandBuilder, initWithASNestedScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNestedScrollViewImpl_NestedScrollViewCommandBuilder)

@implementation ASNestedScrollViewImpl_NestedScrollViewBean

- (instancetype)initWithASNestedScrollViewImpl:(ASNestedScrollViewImpl *)outer$ {
  ASNestedScrollViewImpl_NestedScrollViewBean_initWithASNestedScrollViewImpl_(self, outer$);
  return self;
}

- (void)setForegroundGravityWithNSString:(NSString *)value {
  (void) [((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setForegroundGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)isMeasureAllChildren {
  return [((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMeasureAllChildren])) executeWithBoolean:false])) isMeasureAllChildren];
}

- (void)setMeasureAllChildrenWithBoolean:(jboolean)value {
  (void) [((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMeasureAllChildrenWithBoolean:value])) executeWithBoolean:true];
}

- (void)setNestedScrollingEnabledWithBoolean:(jboolean)value {
  (void) [((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setNestedScrollingEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (void)setOnScrollChangeWithNSString:(NSString *)value {
  (void) [((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnScrollChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setFillViewportWithBoolean:(jboolean)value {
  (void) [((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFillViewportWithBoolean:value])) executeWithBoolean:true];
}

- (void)setSmoothScrollingEnabledWithBoolean:(jboolean)value {
  (void) [((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSmoothScrollingEnabledWithBoolean:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASNestedScrollViewImpl:);
  methods[1].selector = @selector(setForegroundGravityWithNSString:);
  methods[2].selector = @selector(isMeasureAllChildren);
  methods[3].selector = @selector(setMeasureAllChildrenWithBoolean:);
  methods[4].selector = @selector(setNestedScrollingEnabledWithBoolean:);
  methods[5].selector = @selector(setOnScrollChangeWithNSString:);
  methods[6].selector = @selector(setFillViewportWithBoolean:);
  methods[7].selector = @selector(setSmoothScrollingEnabledWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASNestedScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASNestedScrollViewImpl;", "setForegroundGravity", "LNSString;", "setMeasureAllChildren", "Z", "setNestedScrollingEnabled", "setOnScrollChange", "setFillViewport", "setSmoothScrollingEnabled" };
  static const J2ObjcClassInfo _ASNestedScrollViewImpl_NestedScrollViewBean = { "NestedScrollViewBean", "com.ashera.nestedscrollview", ptrTable, methods, fields, 7, 0x1, 8, 1, 0, -1, -1, -1, -1 };
  return &_ASNestedScrollViewImpl_NestedScrollViewBean;
}

@end

void ASNestedScrollViewImpl_NestedScrollViewBean_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_NestedScrollViewBean *self, ASNestedScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASNestedScrollViewImpl_NestedScrollViewBean *new_ASNestedScrollViewImpl_NestedScrollViewBean_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_NestedScrollViewBean, initWithASNestedScrollViewImpl_, outer$)
}

ASNestedScrollViewImpl_NestedScrollViewBean *create_ASNestedScrollViewImpl_NestedScrollViewBean_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_NestedScrollViewBean, initWithASNestedScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNestedScrollViewImpl_NestedScrollViewBean)

@implementation ASNestedScrollViewImpl_NestedScrollViewParamsBean

- (instancetype)initWithASNestedScrollViewImpl:(ASNestedScrollViewImpl *)outer$ {
  ASNestedScrollViewImpl_NestedScrollViewParamsBean_initWithASNestedScrollViewImpl_(self, outer$);
  return self;
}

- (id)getLayoutGravityWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutGravity])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutGravity];
}

- (void)setLayoutGravityWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *) nil_chk([((ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutGravityWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASNestedScrollViewImpl:);
  methods[1].selector = @selector(getLayoutGravityWithASIWidget:);
  methods[2].selector = @selector(setLayoutGravityWithASIWidget:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASNestedScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASNestedScrollViewImpl;", "getLayoutGravity", "LASIWidget;", "setLayoutGravity", "LASIWidget;LNSString;" };
  static const J2ObjcClassInfo _ASNestedScrollViewImpl_NestedScrollViewParamsBean = { "NestedScrollViewParamsBean", "com.ashera.nestedscrollview", ptrTable, methods, fields, 7, 0x1, 3, 1, 0, -1, -1, -1, -1 };
  return &_ASNestedScrollViewImpl_NestedScrollViewParamsBean;
}

@end

void ASNestedScrollViewImpl_NestedScrollViewParamsBean_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_NestedScrollViewParamsBean *self, ASNestedScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASNestedScrollViewImpl_NestedScrollViewParamsBean *new_ASNestedScrollViewImpl_NestedScrollViewParamsBean_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_NestedScrollViewParamsBean, initWithASNestedScrollViewImpl_, outer$)
}

ASNestedScrollViewImpl_NestedScrollViewParamsBean *create_ASNestedScrollViewImpl_NestedScrollViewParamsBean_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_NestedScrollViewParamsBean, initWithASNestedScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNestedScrollViewImpl_NestedScrollViewParamsBean)

@implementation ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder

- (instancetype)initWithASNestedScrollViewImpl:(ASNestedScrollViewImpl *)outer$ {
  ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder_initWithASNestedScrollViewImpl_(self, outer$);
  return self;
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *)tryGetLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *)setLayoutGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASNestedScrollViewImpl:);
  methods[1].selector = @selector(tryGetLayoutGravity);
  methods[2].selector = @selector(getLayoutGravity);
  methods[3].selector = @selector(setLayoutGravityWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASNestedScrollViewImpl;", "setLayoutGravity", "LNSString;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/nestedscrollview/NestedScrollViewImpl$NestedScrollViewCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder = { "NestedScrollViewCommandParamsBuilder", "com.ashera.nestedscrollview", ptrTable, methods, NULL, 7, 0x1, 4, 0, 0, -1, -1, 3, -1 };
  return &_ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder;
}

@end

void ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *self, ASNestedScrollViewImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *new_ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder, initWithASNestedScrollViewImpl_, outer$)
}

ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder *create_ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder, initWithASNestedScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNestedScrollViewImpl_NestedScrollViewCommandParamsBuilder)

@implementation ASNestedScrollViewImpl_MyUIScrollViewDelegate

- (instancetype)initWithASNestedScrollViewImpl:(ASNestedScrollViewImpl *)outer$ {
  ASNestedScrollViewImpl_MyUIScrollViewDelegate_initWithASNestedScrollViewImpl_(self, outer$);
  return self;
}

- (void)nativeScrollChangeListenerWithId:(id)nativeWidget {
  UIScrollView* scrollview = ((UIScrollView*)nativeWidget);
  scrollview.delegate = self;
}

- (void)onscrollWithInt:(jint)scrollX
                withInt:(jint)scrollY {
  ASNestedScrollViewImpl_handleScrollWithInt_withInt_(this$0_, scrollY, 1);
}

- (void)__javaClone:(ASNestedScrollViewImpl_MyUIScrollViewDelegate *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView {
  [self onscrollWithInt:scrollView.contentOffset.x withInt:scrollView.contentOffset.y];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASNestedScrollViewImpl:);
  methods[1].selector = @selector(nativeScrollChangeListenerWithId:);
  methods[2].selector = @selector(onscrollWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASNestedScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "oldScrollY_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "oldScrollX_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "listener_", "LADView_OnScrollChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASNestedScrollViewImpl;", "nativeScrollChangeListener", "LNSObject;", "onscroll", "II" };
  static const J2ObjcClassInfo _ASNestedScrollViewImpl_MyUIScrollViewDelegate = { "MyUIScrollViewDelegate", "com.ashera.nestedscrollview", ptrTable, methods, fields, 7, 0x0, 3, 4, 0, -1, -1, -1, -1 };
  return &_ASNestedScrollViewImpl_MyUIScrollViewDelegate;
}

@end

void ASNestedScrollViewImpl_MyUIScrollViewDelegate_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_MyUIScrollViewDelegate *self, ASNestedScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->oldScrollY_ = 0;
  self->oldScrollX_ = 0;
  [((id<ASIFragment>) nil_chk([outer$ getFragment])) addListenerWithASIWidget:outer$ withId:self];
}

ASNestedScrollViewImpl_MyUIScrollViewDelegate *new_ASNestedScrollViewImpl_MyUIScrollViewDelegate_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_MyUIScrollViewDelegate, initWithASNestedScrollViewImpl_, outer$)
}

ASNestedScrollViewImpl_MyUIScrollViewDelegate *create_ASNestedScrollViewImpl_MyUIScrollViewDelegate_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_MyUIScrollViewDelegate, initWithASNestedScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNestedScrollViewImpl_MyUIScrollViewDelegate)

@implementation ASNestedScrollViewImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASNestedScrollViewImpl_$Lambda$1_initWithASIWidget_(ASNestedScrollViewImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASNestedScrollViewImpl_$Lambda$1 *new_ASNestedScrollViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASNestedScrollViewImpl_$Lambda$1 *create_ASNestedScrollViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

@implementation ASNestedScrollViewImpl_$Lambda$2

- (void)run {
  [((ADXNestedScrollView *) nil_chk(this$0_->nestedScrollView_)) stopNestedScroll];
}

@end

void ASNestedScrollViewImpl_$Lambda$2_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_$Lambda$2 *self, ASNestedScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASNestedScrollViewImpl_$Lambda$2 *new_ASNestedScrollViewImpl_$Lambda$2_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_$Lambda$2, initWithASNestedScrollViewImpl_, outer$)
}

ASNestedScrollViewImpl_$Lambda$2 *create_ASNestedScrollViewImpl_$Lambda$2_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_$Lambda$2, initWithASNestedScrollViewImpl_, outer$)
}

@implementation ASNestedScrollViewImpl_$Lambda$3

- (void)run {
  ASNestedScrollViewImpl_setEnabledWithBoolean_(this$0_, true);
}

@end

void ASNestedScrollViewImpl_$Lambda$3_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl_$Lambda$3 *self, ASNestedScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASNestedScrollViewImpl_$Lambda$3 *new_ASNestedScrollViewImpl_$Lambda$3_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASNestedScrollViewImpl_$Lambda$3, initWithASNestedScrollViewImpl_, outer$)
}

ASNestedScrollViewImpl_$Lambda$3 *create_ASNestedScrollViewImpl_$Lambda$3_initWithASNestedScrollViewImpl_(ASNestedScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASNestedScrollViewImpl_$Lambda$3, initWithASNestedScrollViewImpl_, outer$)
}
